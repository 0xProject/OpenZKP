/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface MerkleVerifierInterface extends Interface {
  functions: {};

  events: {
    LogTrace: TypedEventDescription<{
      encodeTopics([name, enter, gasLeft, allocated]: [
        null,
        null,
        null,
        null
      ]): string[];
    }>;
  };
}

export class MerkleVerifier extends Contract {
  connect(signerOrProvider: Signer | Provider | string): MerkleVerifier;
  attach(addressOrName: string): MerkleVerifier;
  deployed(): Promise<MerkleVerifier>;

  on(event: EventFilter | string, listener: Listener): MerkleVerifier;
  once(event: EventFilter | string, listener: Listener): MerkleVerifier;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): MerkleVerifier;
  removeAllListeners(eventName: EventFilter | string): MerkleVerifier;
  removeListener(eventName: any, listener: Listener): MerkleVerifier;

  interface: MerkleVerifierInterface;

  functions: {};

  filters: {
    LogTrace(
      name: null,
      enter: null,
      gasLeft: null,
      allocated: null
    ): EventFilter;
  };

  estimate: {};
}
