/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractFactory, Signer } from "ethers";
import { Provider } from "ethers/providers";
import { UnsignedTransaction } from "ethers/utils/transaction";

import { TransactionOverrides } from ".";
import { MerkleVerifierTest } from "./MerkleVerifierTest";

export class MerkleVerifierTestFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: TransactionOverrides): Promise<MerkleVerifierTest> {
    return super.deploy(overrides) as Promise<MerkleVerifierTest>;
  }
  getDeployTransaction(overrides?: TransactionOverrides): UnsignedTransaction {
    return super.getDeployTransaction(overrides);
  }
  attach(address: string): MerkleVerifierTest {
    return super.attach(address) as MerkleVerifierTest;
  }
  connect(signer: Signer): MerkleVerifierTestFactory {
    return super.connect(signer) as MerkleVerifierTestFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MerkleVerifierTest {
    return new Contract(address, _abi, signerOrProvider) as MerkleVerifierTest;
  }
}

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "name",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "bool",
        name: "enter",
        type: "bool"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "gasLeft",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "allocated",
        type: "uint256"
      }
    ],
    name: "LogTrace",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "data",
        type: "bool"
      }
    ],
    name: "log_bool",
    type: "event"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "root",
        type: "bytes32"
      },
      {
        internalType: "bytes32[]",
        name: "data_points",
        type: "bytes32[]"
      },
      {
        internalType: "uint256[]",
        name: "indices",
        type: "uint256[]"
      },
      {
        internalType: "bytes32[]",
        name: "decommitment",
        type: "bytes32[]"
      }
    ],
    name: "verify_merkle_proof_external",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  }
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506104cd806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631f9a6c1314610030575b600080fd5b61014b6004803603608081101561004657600080fd5b8135919081019060408101602082013564010000000081111561006857600080fd5b82018360208201111561007a57600080fd5b8035906020019184602083028401116401000000008311171561009c57600080fd5b9193909290916020810190356401000000008111156100ba57600080fd5b8201836020820111156100cc57600080fd5b803590602001918460208302840111640100000000831117156100ee57600080fd5b91939092909160208101903564010000000081111561010c57600080fd5b82018360208201111561011e57600080fd5b8035906020019184602083028401116401000000008311171561014057600080fd5b50909250905061015f565b604080519115158252519081900360200190f35b6000806102018989898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b91829185019084908082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a91829185019084908082843760009201919091525061024692505050565b60408051821515815290519192507fd44f90c0efdac6a7cdc8d4b8c65b80dcb84777650810e2395affa7566d4fbb5d919081900360200190a150979650505050505050565b60006102737f7665726966795f6d65726b6c655f70726f6f66000000000000000000000000006001610442565b82518451146102e357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c696420696e70757400000000000000000000000000000000000000604482015290519081900360640190fd5b600084511161035357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f20636c61696d656420646174610000000000000000000000000000000000604482015290519081900360640190fd5b825160209485019493840193929092019160051b6000805b81860151828801516001821660051b528360208401069250600181141561039957886020511494505061040c565b86830151600182171480156103bc578389015160205284602085010693506103ce565b8651600183191660051b526020870196505b5060011c8682015260406000207fffffffffffffffffffffffffffffffffffffffff000000000000000000000000168782015260200182900661036b565b50505061043a7f7665726966795f6d65726b6c655f70726f6f66000000000000000000000000006000610442565b949350505050565b60005a604080518581528415156020820152808201839052606081018190529051919250907f7c410723af298384134622201acb6634aca1f7fd03cf697165325fac19a407819080830360800190a15050505056fea2646970667358221220c6900e7f9728586bf7df3829621a9d7eba7c17ca0e30506eb9957bdc7c7b564564736f6c63430006060033";
