/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Contract, ContractTransaction, EventFilter, Signer} from 'ethers';
import {Listener, Provider} from 'ethers/providers';
import {Arrayish, BigNumber, BigNumberish, Interface} from 'ethers/utils';
import {TransactionOverrides, TypedEventDescription, TypedFunctionDescription} from '.';

interface StarkVerifierInterface extends Interface {
    functions: {
        verify_proof: TypedFunctionDescription<{
            encode([proof, constraints]: [
                {
                    public_inputs: Arrayish;
                    trace_values: BigNumberish[];
                    trace_commitment: Arrayish;
                    constraint_values: BigNumberish[];
                    constraint_commitment: Arrayish;
                    trace_oods_values: BigNumberish[];
                    constraint_oods_values: BigNumberish[];
                    pow_nonce: Arrayish;
                    trace_decommitment: Arrayish[];
                    constraint_decommitment: Arrayish[];
                    fri_values: BigNumberish[][];
                    fri_commitments: Arrayish[];
                    fri_decommitments: Arrayish[][];
                    last_layer_coeffiencts: BigNumberish[];
                },
                string,
            ]): string;
        }>;
    };

    events: {};
}

export class StarkVerifier extends Contract {
    connect(signerOrProvider: Signer | Provider | string): StarkVerifier;
    attach(addressOrName: string): StarkVerifier;
    deployed(): Promise<StarkVerifier>;

    on(event: EventFilter | string, listener: Listener): StarkVerifier;
    once(event: EventFilter | string, listener: Listener): StarkVerifier;
    addListener(eventName: EventFilter | string, listener: Listener): StarkVerifier;
    removeAllListeners(eventName: EventFilter | string): StarkVerifier;
    removeListener(eventName: any, listener: Listener): StarkVerifier;

    interface: StarkVerifierInterface;

    functions: {
        verify_proof(
            proof: {
                public_inputs: Arrayish;
                trace_values: BigNumberish[];
                trace_commitment: Arrayish;
                constraint_values: BigNumberish[];
                constraint_commitment: Arrayish;
                trace_oods_values: BigNumberish[];
                constraint_oods_values: BigNumberish[];
                pow_nonce: Arrayish;
                trace_decommitment: Arrayish[];
                constraint_decommitment: Arrayish[];
                fri_values: BigNumberish[][];
                fri_commitments: Arrayish[];
                fri_decommitments: Arrayish[][];
                last_layer_coeffiencts: BigNumberish[];
            },
            constraints: string,
            overrides?: TransactionOverrides,
        ): Promise<ContractTransaction>;
    };

    verify_proof(
        proof: {
            public_inputs: Arrayish;
            trace_values: BigNumberish[];
            trace_commitment: Arrayish;
            constraint_values: BigNumberish[];
            constraint_commitment: Arrayish;
            trace_oods_values: BigNumberish[];
            constraint_oods_values: BigNumberish[];
            pow_nonce: Arrayish;
            trace_decommitment: Arrayish[];
            constraint_decommitment: Arrayish[];
            fri_values: BigNumberish[][];
            fri_commitments: Arrayish[];
            fri_decommitments: Arrayish[][];
            last_layer_coeffiencts: BigNumberish[];
        },
        constraints: string,
        overrides?: TransactionOverrides,
    ): Promise<ContractTransaction>;

    filters: {};

    estimate: {
        verify_proof(
            proof: {
                public_inputs: Arrayish;
                trace_values: BigNumberish[];
                trace_commitment: Arrayish;
                constraint_values: BigNumberish[];
                constraint_commitment: Arrayish;
                trace_oods_values: BigNumberish[];
                constraint_oods_values: BigNumberish[];
                pow_nonce: Arrayish;
                trace_decommitment: Arrayish[];
                constraint_decommitment: Arrayish[];
                fri_values: BigNumberish[][];
                fri_commitments: Arrayish[];
                fri_decommitments: Arrayish[][];
                last_layer_coeffiencts: BigNumberish[];
            },
            constraints: string,
        ): Promise<BigNumber>;
    };
}
