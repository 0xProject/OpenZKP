/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractFactory, Signer } from "ethers";
import { Provider } from "ethers/providers";
import { UnsignedTransaction } from "ethers/utils/transaction";

import { TransactionOverrides } from ".";
import { Trace } from "./Trace";

export class TraceFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: TransactionOverrides): Promise<Trace> {
    return super.deploy(overrides) as Promise<Trace>;
  }
  getDeployTransaction(overrides?: TransactionOverrides): UnsignedTransaction {
    return super.getDeployTransaction(overrides);
  }
  attach(address: string): Trace {
    return super.attach(address) as Trace;
  }
  connect(signer: Signer): TraceFactory {
    return super.connect(signer) as TraceFactory;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Trace {
    return new Contract(address, _abi, signerOrProvider) as Trace;
  }
}

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "name",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "bool",
        name: "enter",
        type: "bool"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "gasLeft",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "allocated",
        type: "uint256"
      }
    ],
    name: "LogTrace",
    type: "event"
  }
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220023fdd57fd5244dbaf0f496b8046c4c99eb78b51d73444a3eb8c3774a49912fb64736f6c63430006060033";
