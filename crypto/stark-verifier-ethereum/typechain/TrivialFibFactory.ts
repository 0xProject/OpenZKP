/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Contract, ContractFactory, Signer} from 'ethers';
import {Provider} from 'ethers/providers';
import {UnsignedTransaction} from 'ethers/utils/transaction';

import {TransactionOverrides} from '.';
import {TrivialFib} from './TrivialFib';

export class TrivialFibFactory extends ContractFactory {
    constructor(signer?: Signer) {
        super(_abi, _bytecode, signer);
    }

    deploy(overrides?: TransactionOverrides): Promise<TrivialFib> {
        return super.deploy(overrides) as Promise<TrivialFib>;
    }
    getDeployTransaction(overrides?: TransactionOverrides): UnsignedTransaction {
        return super.getDeployTransaction(overrides);
    }
    attach(address: string): TrivialFib {
        return super.attach(address) as TrivialFib;
    }
    connect(signer: Signer): TrivialFibFactory {
        return super.connect(signer) as TrivialFibFactory;
    }
    static connect(address: string, signerOrProvider: Signer | Provider): TrivialFib {
        return new Contract(address, _abi, signerOrProvider) as TrivialFib;
    }
}

const _abi = [
    {
        inputs: [
            {
                components: [
                    {
                        internalType: 'bytes',
                        name: 'public_inputs',
                        type: 'bytes',
                    },
                    {
                        internalType: 'uint256[]',
                        name: 'trace_values',
                        type: 'uint256[]',
                    },
                    {
                        internalType: 'bytes32',
                        name: 'trace_commitment',
                        type: 'bytes32',
                    },
                    {
                        internalType: 'uint256[]',
                        name: 'constraint_values',
                        type: 'uint256[]',
                    },
                    {
                        internalType: 'bytes32',
                        name: 'constraint_commitment',
                        type: 'bytes32',
                    },
                    {
                        internalType: 'uint256[]',
                        name: 'trace_oods_values',
                        type: 'uint256[]',
                    },
                    {
                        internalType: 'uint256[]',
                        name: 'constraint_oods_values',
                        type: 'uint256[]',
                    },
                    {
                        internalType: 'bytes8',
                        name: 'pow_nonce',
                        type: 'bytes8',
                    },
                    {
                        internalType: 'bytes32[]',
                        name: 'trace_decommitment',
                        type: 'bytes32[]',
                    },
                    {
                        internalType: 'bytes32[]',
                        name: 'constraint_decommitment',
                        type: 'bytes32[]',
                    },
                    {
                        internalType: 'uint256[][]',
                        name: 'fri_values',
                        type: 'uint256[][]',
                    },
                    {
                        internalType: 'bytes32[]',
                        name: 'fri_commitments',
                        type: 'bytes32[]',
                    },
                    {
                        internalType: 'bytes32[][]',
                        name: 'fri_decommitments',
                        type: 'bytes32[][]',
                    },
                    {
                        internalType: 'uint256[]',
                        name: 'last_layer_coeffiencts',
                        type: 'uint256[]',
                    },
                ],
                internalType: 'struct ProofTypes.StarkProof',
                name: 'proof',
                type: 'tuple',
            },
            {
                components: [
                    {
                        internalType: 'uint8',
                        name: 'number_of_columns',
                        type: 'uint8',
                    },
                    {
                        internalType: 'uint8',
                        name: 'log_trace_length',
                        type: 'uint8',
                    },
                    {
                        internalType: 'uint64',
                        name: 'number_of_constraints',
                        type: 'uint64',
                    },
                    {
                        internalType: 'uint8',
                        name: 'log_blowup',
                        type: 'uint8',
                    },
                    {
                        internalType: 'uint8',
                        name: 'constraint_degree',
                        type: 'uint8',
                    },
                    {
                        internalType: 'uint8',
                        name: 'pow_bits',
                        type: 'uint8',
                    },
                    {
                        internalType: 'uint8',
                        name: 'number_of_queries',
                        type: 'uint8',
                    },
                    {
                        internalType: 'uint8[]',
                        name: 'fri_layout',
                        type: 'uint8[]',
                    },
                ],
                internalType: 'struct ProofTypes.ProofParameters',
                name: 'params',
                type: 'tuple',
            },
            {
                internalType: 'uint64[]',
                name: 'queries',
                type: 'uint64[]',
            },
            {
                internalType: 'uint256',
                name: 'oods_point',
                type: 'uint256',
            },
            {
                internalType: 'uint256[]',
                name: 'constraint_coeffiencts',
                type: 'uint256[]',
            },
            {
                internalType: 'uint256[]',
                name: 'oods_coeffiencts',
                type: 'uint256[]',
            },
        ],
        name: 'constraint_calculations',
        outputs: [
            {
                internalType: 'uint256[]',
                name: '',
                type: 'uint256[]',
            },
            {
                internalType: 'uint256',
                name: '',
                type: 'uint256',
            },
        ],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'bytes',
                name: 'public_input',
                type: 'bytes',
            },
        ],
        name: 'initalize_system',
        outputs: [
            {
                components: [
                    {
                        internalType: 'uint8',
                        name: 'number_of_columns',
                        type: 'uint8',
                    },
                    {
                        internalType: 'uint8',
                        name: 'log_trace_length',
                        type: 'uint8',
                    },
                    {
                        internalType: 'uint64',
                        name: 'number_of_constraints',
                        type: 'uint64',
                    },
                    {
                        internalType: 'uint8',
                        name: 'log_blowup',
                        type: 'uint8',
                    },
                    {
                        internalType: 'uint8',
                        name: 'constraint_degree',
                        type: 'uint8',
                    },
                    {
                        internalType: 'uint8',
                        name: 'pow_bits',
                        type: 'uint8',
                    },
                    {
                        internalType: 'uint8',
                        name: 'number_of_queries',
                        type: 'uint8',
                    },
                    {
                        internalType: 'uint8[]',
                        name: 'fri_layout',
                        type: 'uint8[]',
                    },
                ],
                internalType: 'struct ProofTypes.ProofParameters',
                name: '',
                type: 'tuple',
            },
            {
                components: [
                    {
                        internalType: 'bytes32',
                        name: 'digest',
                        type: 'bytes32',
                    },
                    {
                        internalType: 'uint64',
                        name: 'counter',
                        type: 'uint64',
                    },
                ],
                internalType: 'struct PublicCoin.Coin',
                name: '',
                type: 'tuple',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
];

const _bytecode =
    '0x608060405234801561001057600080fd5b5061093e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063cdb7ef431461003b578063f837656b14610065575b600080fd5b61004e6100493660046106ba565b610086565b60405161005c92919061080d565b60405180910390f35b610078610073366004610650565b610432565b60405161005c929190610855565b60606000610092610568565b5060408051610280810182527f0278847872d28b671420b700e8472b61d6846def99dbf99a7a5399322e5a2b2581527f067cda05602e614e2c1b223c79da8baebac06b2d292fefb80ea4e86e18f943bc60208201527ec675c55829b7a6c183dde1223e93478d6b70c26bcc2201889e1b7887fe6aed818301527f020c9a64e2b4c00045aea9a87b1164a50466eabd2cfe73384cf9bebd790b20b06060808301919091527f017228952dfaed74882b395e72518fc0a62f850a1988d663d3bc71be2ac0fa1760808301527f052108c7d4c28ce004ab79e110fb3cdc47d2ac50fb98de8ce04472ac67198a1d60a08301527f05f492f33d6193afbb51b02b931c1aa08ae75af0893b20a46e5061fab952098d60c08301527f06a0f45dfaf230e64f2bf379bd3c98f21420bddd9b8fef9e9c65f7486c6d504660e08301527e262047cab1f998fb5707c6eee44b246e4ef011d2832eb289b708be2c1368d66101008301527f04ab8123e26adcb3dbd198991ab1e9b435712c26a246ef5396911e1e29d55d336101208301527f02fb6d73ed2f683e39d10a47b8419dcc4a8fd38826e84ec526768fae221e71a96101408301527ee969f57d6c8591abe24b6e44060e01ac72555c00f7f9c5811dd02d857435a36101608301527e69ebcf5161ea303c183fe4a92d6ff06343bca3cd382792aeb4a1b43c6610f56101808301527f01f7f5804a45c9da2940a323ca6edf93dab8b19a08917392951306162f45cfaa6101a08301527f07ffc4537e1b3c8f709413fbec183286e663878fb43cb6c58d15f618f91dcae86101c08301527f06cfe5f951759fdfaf0affdef0fc822396baae1090e579bc18a20c154c4dd97b6101e08301527f033028e4c3a950389e9e219d624acecc8d8c201f27005335ec487fb8decca1e86102008301527e624958789bc7d55270e20d9abe2ab66e58f9713af2cf0a3a6feba91c5145066102208301527f02ba418d91252465917e8e1f6126194005b06abc1739036c1068ebef512a75366102408301527f0714fd690cb3ef6d859113829d892187b2a6300949e3fca261214473632e5559610260830152825160148082526102a08201909452919290919081602001602082028036833701905050905060005b60148110156103ff578281601481106103db57fe5b60200201518282815181106103ec57fe5b60209081029190910101526001016103c6565b509c7f01e94b626dcff9d77c33c75b33d8457ba91534da30442d41d717a06e3f65211d9c509a5050505050505050505050565b61043a610587565b6104426105cd565b61044a6105cd565b506040805180820182527fc891a11ddbc6c425fad523a7a4aeafa505d7aa1638cfffbd5b747100bc69e36781526000602082015281516003808252608082019093529091606091908160200160208202803683370190505090506003816000815181106104b357fe5b602002602001019060ff16908160ff16815250506003816001815181106104d657fe5b602002602001019060ff16908160ff16815250506002816002815181106104f957fe5b602002602001019060ff16908160ff1681525050610515610587565b50604080516101008101825260028152600a60208201819052600492820183905260608201929092526001608082015260a0810191909152601460c082015260e0810191909152925090505b9250929050565b6040518061028001604052806014906020820280368337509192915050565b604080516101008101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c082019290925260e081019190915290565b604080518082019091526000808252602082015290565b60008083601f8401126105f5578182fd5b50813567ffffffffffffffff81111561060c578182fd5b602083019150836020808302850101111561056157600080fd5b60006101008284031215610638578081fd5b50919050565b60006101c08284031215610638578081fd5b60008060208385031215610662578182fd5b823567ffffffffffffffff80821115610679578384fd5b81850186601f82011261068a578485fd5b803592508183111561069a578485fd5b8660208483010111156106ab578485fd5b60200196919550909350505050565b600080600080600080600080600060c08a8c0312156106d7578485fd5b893567ffffffffffffffff808211156106ee578687fd5b6106fa8d838e0161063e565b9a5060208c013591508082111561070f578687fd5b61071b8d838e01610626565b995060408c0135915080821115610730578687fd5b61073c8d838e016105e4565b909950975060608c0135965060808c013591508082111561075b578586fd5b6107678d838e016105e4565b909650945060a08c013591508082111561077f578384fd5b5061078c8c828d016105e4565b8194508093505050509295985092959850929598565b6000815180845260208085019450808401835b838110156107d457815160ff16875295820195908201906001016107b5565b509495945050505050565b8051825260209081015167ffffffffffffffff16910152565b67ffffffffffffffff169052565b60ff169052565b604080825283519082018190526000906020906060840190828701845b828110156108465781518452928401929084019060010161082a565b50505092019290925292915050565b60006060825260ff845116606083015260ff6020850151166080830152604084015161088460a08401826107f8565b50606084015161089760c0840182610806565b5060808401516108aa60e0840182610806565b5060a08401516101006108bf81850183610806565b60c086015191506108d4610120850183610806565b60e0860151915080610140850152506108f16101608401826107a2565b91505061090160208301846107df565b939250505056fea26469706673582212204779c52138d41faa952b51303252bd6354a8595416f165b082b8820989112edb64736f6c63430006040033';
