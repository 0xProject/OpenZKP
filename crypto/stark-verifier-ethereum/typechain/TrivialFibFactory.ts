/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractFactory, Signer } from "ethers";
import { Provider } from "ethers/providers";
import { UnsignedTransaction } from "ethers/utils/transaction";

import { TransactionOverrides } from ".";
import { TrivialFib } from "./TrivialFib";

export class TrivialFibFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: TransactionOverrides): Promise<TrivialFib> {
    return super.deploy(overrides) as Promise<TrivialFib>;
  }
  getDeployTransaction(overrides?: TransactionOverrides): UnsignedTransaction {
    return super.getDeployTransaction(overrides);
  }
  attach(address: string): TrivialFib {
    return super.attach(address) as TrivialFib;
  }
  connect(signer: Signer): TrivialFibFactory {
    return super.connect(signer) as TrivialFibFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TrivialFib {
    return new Contract(address, _abi, signerOrProvider) as TrivialFib;
  }
}

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "public_inputs",
            type: "bytes"
          },
          {
            internalType: "uint256[]",
            name: "trace_values",
            type: "uint256[]"
          },
          {
            internalType: "bytes32",
            name: "trace_commitment",
            type: "bytes32"
          },
          {
            internalType: "uint256[]",
            name: "constraint_values",
            type: "uint256[]"
          },
          {
            internalType: "bytes32",
            name: "constraint_commitment",
            type: "bytes32"
          },
          {
            internalType: "uint256[]",
            name: "trace_oods_values",
            type: "uint256[]"
          },
          {
            internalType: "uint256[]",
            name: "constraint_oods_values",
            type: "uint256[]"
          },
          {
            internalType: "bytes8",
            name: "pow_nonce",
            type: "bytes8"
          },
          {
            internalType: "bytes32[]",
            name: "trace_decommitment",
            type: "bytes32[]"
          },
          {
            internalType: "bytes32[]",
            name: "constraint_decommitment",
            type: "bytes32[]"
          },
          {
            internalType: "uint256[][]",
            name: "fri_values",
            type: "uint256[][]"
          },
          {
            internalType: "bytes32[]",
            name: "fri_commitments",
            type: "bytes32[]"
          },
          {
            internalType: "bytes32[][]",
            name: "fri_decommitments",
            type: "bytes32[][]"
          },
          {
            internalType: "uint256[]",
            name: "last_layer_coefficients",
            type: "uint256[]"
          }
        ],
        internalType: "struct ProofTypes.StarkProof",
        name: "proof",
        type: "tuple"
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "number_of_columns",
            type: "uint8"
          },
          {
            internalType: "uint8",
            name: "log_trace_length",
            type: "uint8"
          },
          {
            internalType: "uint64",
            name: "number_of_constraints",
            type: "uint64"
          },
          {
            internalType: "uint8",
            name: "log_blowup",
            type: "uint8"
          },
          {
            internalType: "uint8",
            name: "constraint_degree",
            type: "uint8"
          },
          {
            internalType: "uint8",
            name: "pow_bits",
            type: "uint8"
          },
          {
            internalType: "uint8",
            name: "number_of_queries",
            type: "uint8"
          },
          {
            internalType: "uint8[]",
            name: "fri_layout",
            type: "uint8[]"
          }
        ],
        internalType: "struct ProofTypes.ProofParameters",
        name: "params",
        type: "tuple"
      },
      {
        internalType: "uint64[]",
        name: "queries",
        type: "uint64[]"
      },
      {
        internalType: "uint256",
        name: "oods_point",
        type: "uint256"
      },
      {
        internalType: "uint256[]",
        name: "constraint_coeffiencts",
        type: "uint256[]"
      },
      {
        internalType: "uint256[]",
        name: "oods_coeffiencts",
        type: "uint256[]"
      }
    ],
    name: "constraint_calculations",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]"
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "public_input",
        type: "bytes"
      }
    ],
    name: "initalize_system",
    outputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "number_of_columns",
            type: "uint8"
          },
          {
            internalType: "uint8",
            name: "log_trace_length",
            type: "uint8"
          },
          {
            internalType: "uint64",
            name: "number_of_constraints",
            type: "uint64"
          },
          {
            internalType: "uint8",
            name: "log_blowup",
            type: "uint8"
          },
          {
            internalType: "uint8",
            name: "constraint_degree",
            type: "uint8"
          },
          {
            internalType: "uint8",
            name: "pow_bits",
            type: "uint8"
          },
          {
            internalType: "uint8",
            name: "number_of_queries",
            type: "uint8"
          },
          {
            internalType: "uint8[]",
            name: "fri_layout",
            type: "uint8[]"
          }
        ],
        internalType: "struct ProofTypes.ProofParameters",
        name: "",
        type: "tuple"
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "digest",
            type: "bytes32"
          },
          {
            internalType: "uint64",
            name: "counter",
            type: "uint64"
          }
        ],
        internalType: "struct PublicCoin.Coin",
        name: "",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061095d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063cdb7ef431461003b578063f837656b14610065575b600080fd5b61004e6100493660046106cf565b610086565b60405161005c929190610822565b60405180910390f35b610078610073366004610665565b610447565b60405161005c92919061086a565b6060600061009261057d565b6040518061028001604052807f0278847872d28b671420b700e8472b61d6846def99dbf99a7a5399322e5a2b2581526020017f067cda05602e614e2c1b223c79da8baebac06b2d292fefb80ea4e86e18f943bc81526020017ec675c55829b7a6c183dde1223e93478d6b70c26bcc2201889e1b7887fe6aed81526020017f020c9a64e2b4c00045aea9a87b1164a50466eabd2cfe73384cf9bebd790b20b081526020017f017228952dfaed74882b395e72518fc0a62f850a1988d663d3bc71be2ac0fa1781526020017f052108c7d4c28ce004ab79e110fb3cdc47d2ac50fb98de8ce04472ac67198a1d81526020017f05f492f33d6193afbb51b02b931c1aa08ae75af0893b20a46e5061fab952098d81526020017f06a0f45dfaf230e64f2bf379bd3c98f21420bddd9b8fef9e9c65f7486c6d504681526020017e262047cab1f998fb5707c6eee44b246e4ef011d2832eb289b708be2c1368d681526020017f04ab8123e26adcb3dbd198991ab1e9b435712c26a246ef5396911e1e29d55d3381526020017f02fb6d73ed2f683e39d10a47b8419dcc4a8fd38826e84ec526768fae221e71a981526020017ee969f57d6c8591abe24b6e44060e01ac72555c00f7f9c5811dd02d857435a381526020017e69ebcf5161ea303c183fe4a92d6ff06343bca3cd382792aeb4a1b43c6610f581526020017f01f7f5804a45c9da2940a323ca6edf93dab8b19a08917392951306162f45cfaa81526020017f07ffc4537e1b3c8f709413fbec183286e663878fb43cb6c58d15f618f91dcae881526020017f06cfe5f951759fdfaf0affdef0fc822396baae1090e579bc18a20c154c4dd97b81526020017f033028e4c3a950389e9e219d624acecc8d8c201f27005335ec487fb8decca1e881526020017e624958789bc7d55270e20d9abe2ab66e58f9713af2cf0a3a6feba91c51450681526020017f02ba418d91252465917e8e1f6126194005b06abc1739036c1068ebef512a753681526020017f0714fd690cb3ef6d859113829d892187b2a6300949e3fca261214473632e555981525090506060601467ffffffffffffffff811180156103ab57600080fd5b506040519080825280602002602001820160405280156103d5578160200160208202803683370190505b50905060005b6014811015610414578281601481106103f057fe5b602002015182828151811061040157fe5b60209081029190910101526001016103db565b509c7f01e94b626dcff9d77c33c75b33d8457ba91534da30442d41d717a06e3f65211d9c509a5050505050505050505050565b61044f61059c565b6104576105e2565b61045f6105e2565b506040805180820182527fc891a11ddbc6c425fad523a7a4aeafa505d7aa1638cfffbd5b747100bc69e36781526000602082015281516003808252608082019093529091606091908160200160208202803683370190505090506003816000815181106104c857fe5b602002602001019060ff16908160ff16815250506003816001815181106104eb57fe5b602002602001019060ff16908160ff168152505060028160028151811061050e57fe5b602002602001019060ff16908160ff168152505061052a61059c565b50604080516101008101825260028152600a60208201819052600492820183905260608201929092526001608082015260a0810191909152601460c082015260e0810191909152925090505b9250929050565b6040518061028001604052806014906020820280368337509192915050565b604080516101008101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c082019290925260e081019190915290565b604080518082019091526000808252602082015290565b60008083601f84011261060a578182fd5b50813567ffffffffffffffff811115610621578182fd5b602083019150836020808302850101111561057657600080fd5b6000610100828403121561064d578081fd5b50919050565b60006101c0828403121561064d578081fd5b60008060208385031215610677578182fd5b823567ffffffffffffffff8082111561068e578384fd5b81850186601f82011261069f578485fd5b80359250818311156106af578485fd5b8660208483010111156106c0578485fd5b60200196919550909350505050565b600080600080600080600080600060c08a8c0312156106ec578485fd5b893567ffffffffffffffff80821115610703578687fd5b61070f8d838e01610653565b9a5060208c0135915080821115610724578687fd5b6107308d838e0161063b565b995060408c0135915080821115610745578687fd5b6107518d838e016105f9565b909950975060608c0135965060808c0135915080821115610770578586fd5b61077c8d838e016105f9565b909650945060a08c0135915080821115610794578384fd5b506107a18c828d016105f9565b8194508093505050509295985092959850929598565b6000815180845260208085019450808401835b838110156107e957815160ff16875295820195908201906001016107ca565b509495945050505050565b8051825260209081015167ffffffffffffffff16910152565b67ffffffffffffffff169052565b60ff169052565b604080825283519082018190526000906020906060840190828701845b8281101561085b5781518452928401929084019060010161083f565b50505092019290925292915050565b60006060825261087e60608301855161081b565b6020840151610890608084018261081b565b5060408401516108a360a084018261080d565b5060608401516108b660c084018261081b565b5060808401516108c960e084018261081b565b5060a08401516101006108de8185018361081b565b60c086015191506108f361012085018361081b565b60e0860151915080610140850152506109106101608401826107b7565b91505061092060208301846107f4565b939250505056fea2646970667358221220a87c1cd8531f30308d802c2effd6cdb3ccf86709efe7b7f9f4e27d706cc6047564736f6c63430006060033";
