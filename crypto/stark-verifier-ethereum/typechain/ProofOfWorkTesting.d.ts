/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface ProofOfWorkTestingInterface extends Interface {
  functions: {
    check_proof_of_work_external: TypedFunctionDescription<{
      encode([init_digest, pow_nonce, pow_bits]: [
        Arrayish,
        Arrayish,
        BigNumberish
      ]): string;
    }>;
  };

  events: {};
}

export class ProofOfWorkTesting extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ProofOfWorkTesting;
  attach(addressOrName: string): ProofOfWorkTesting;
  deployed(): Promise<ProofOfWorkTesting>;

  on(event: EventFilter | string, listener: Listener): ProofOfWorkTesting;
  once(event: EventFilter | string, listener: Listener): ProofOfWorkTesting;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): ProofOfWorkTesting;
  removeAllListeners(eventName: EventFilter | string): ProofOfWorkTesting;
  removeListener(eventName: any, listener: Listener): ProofOfWorkTesting;

  interface: ProofOfWorkTestingInterface;

  functions: {
    check_proof_of_work_external(
      init_digest: Arrayish,
      pow_nonce: Arrayish,
      pow_bits: BigNumberish
    ): Promise<boolean>;
  };

  check_proof_of_work_external(
    init_digest: Arrayish,
    pow_nonce: Arrayish,
    pow_bits: BigNumberish
  ): Promise<boolean>;

  filters: {};

  estimate: {
    check_proof_of_work_external(
      init_digest: Arrayish,
      pow_nonce: Arrayish,
      pow_bits: BigNumberish
    ): Promise<BigNumber>;
  };
}
