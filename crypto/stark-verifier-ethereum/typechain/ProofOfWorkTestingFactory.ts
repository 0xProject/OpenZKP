/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Contract, ContractFactory, Signer} from 'ethers';
import {Provider} from 'ethers/providers';
import {UnsignedTransaction} from 'ethers/utils/transaction';

import {TransactionOverrides} from '.';
import {ProofOfWorkTesting} from './ProofOfWorkTesting';

export class ProofOfWorkTestingFactory extends ContractFactory {
    constructor(signer?: Signer) {
        super(_abi, _bytecode, signer);
    }

    deploy(overrides?: TransactionOverrides): Promise<ProofOfWorkTesting> {
        return super.deploy(overrides) as Promise<ProofOfWorkTesting>;
    }
    getDeployTransaction(overrides?: TransactionOverrides): UnsignedTransaction {
        return super.getDeployTransaction(overrides);
    }
    attach(address: string): ProofOfWorkTesting {
        return super.attach(address) as ProofOfWorkTesting;
    }
    connect(signer: Signer): ProofOfWorkTestingFactory {
        return super.connect(signer) as ProofOfWorkTestingFactory;
    }
    static connect(address: string, signerOrProvider: Signer | Provider): ProofOfWorkTesting {
        return new Contract(address, _abi, signerOrProvider) as ProofOfWorkTesting;
    }
}

const _abi = [
    {
        inputs: [
            {
                internalType: 'bytes32',
                name: 'init_digest',
                type: 'bytes32',
            },
            {
                internalType: 'bytes8',
                name: 'pow_nonce',
                type: 'bytes8',
            },
            {
                internalType: 'uint8',
                name: 'pow_bits',
                type: 'uint8',
            },
        ],
        name: 'check_proof_of_work_external',
        outputs: [
            {
                internalType: 'bool',
                name: '',
                type: 'bool',
            },
        ],
        stateMutability: 'pure',
        type: 'function',
    },
];

const _bytecode =
    '0x608060405234801561001057600080fd5b50610374806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063b8409c4914610030575b600080fd5b61007e6004803603606081101561004657600080fd5b5080359060208101357fffffffffffffffff00000000000000000000000000000000000000000000000016906040013560ff16610092565b604080519115158252519081900360200190f35b600061009c610327565b5060408051808201909152848152600060208201526100bc8185856100c5565b95945050505050565b8251604080517f0123456789abcded00000000000000000000000000000000000000000000000060208083019190915260288201939093527fff0000000000000000000000000000000000000000000000000000000000000060f885901b16604882015281516029818303018152604982018352805190840120606982018190527fffffffffffffffff00000000000000000000000000000000000000000000000086166089830181905283516071818503018152609184018552805195019490942060b18301949094528251609981840301815260b9909201909252600092906101b790879063ffffffff6101e916565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff85161c10159150509392505050565b60006102848360000151836040516020018083815260200182805190602001908083835b6020831061024a57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161020d565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052610292565b835250506000602090910152565b6000816040516020018082805190602001908083835b602083106102e557805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016102a8565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001209050919050565b60408051808201909152600080825260208201529056fea264697066735822122014ea7ccbdcf7651fb05a63c6fc9f9b481a3e698ba1f8dd3ac713835c02fe2c8a64736f6c63430006040033';
