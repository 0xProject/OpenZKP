version: 2
jobs:
  build:
    docker:
      - image: circleci/rust:latest
    environment:
      - RUST_BACKTRACE: 1
      - RUSTFLAGS: -Dwarnings
      - NIGHTLY: nightly-2019-08-15
    steps:
      - checkout
      # OPT: Use sccache: https://medium.com/@edouard.oger/rust-caching-on-circleci-using-sccache-c996344f0115
      - restore_cache:
          keys:
          -  target-v1-{{ arch }}-{{ .Branch }}
          -  target-v1-{{ arch }}
          -  target-v1
      - run:
          name: Version information
          command: |
            rustc --version
            cargo --version
            rustup --version
      - run:
          name: Setup build environment
          command: |
            rustup component add rustfmt clippy
            rustup toolchain install $NIGHTLY
            rustup target add wasm32-unknown-unknown --toolchain $NIGHTLY
            rustup component add rustfmt --toolchain $NIGHTLY
            cargo install --git https://github.com/alexcrichton/wasm-gc
          no_output_timeout: 1800s
      - run:
          name: Linting
          command: |
            cargo +$NIGHTLY fmt -p ecc primefield starkdex starkcrypto-wasm stark macros-decl macros-impl macros-lib -- --check
            cargo clippy -p ecc -p primefield -p starkdex -p starkcrypto-wasm -p stark -p macros-decl -p macros-impl -p macros-lib --all-targets
      - run:
          name: Build all targets
          command: |
            cargo build -p ecc -p primefield -p starkdex -p starkcrypto-wasm -p stark -p macros-decl -p macros-impl -p macros-lib  --all-targets
      - run:
          name: Test in debug and release mode
          command: |
            cargo test -p ecc -p primefield -p starkdex -p starkcrypto-wasm -p stark -p macros-decl -p macros-impl -p macros-lib -- --nocapture
            cargo test --release -p ecc -p primefield -p starkdex -p starkcrypto-wasm -p stark -p macros-decl -p macros-impl -p macros-lib -- --nocapture
      - run:
          name: Run benchmarks as tests
          command: |
            # Actually running the benchmarks on CI is too noisy. The results
            # would be meaningless. Instead we just run it to make sure they work.
            cargo bench --bench benchmark -- --test
      # TODO: Coverage
      - run:
          name: Clean build
          command: |
            # Clean workspace projects but not dependencies.
            WORKSPACE=$(cargo metadata --format-version 1 | jq --raw-output '.workspace_members[] | match("^(\\w.+)\\ \\d";"g") | .captures[0].string')
            echo "Workspace projects: " $WORKSPACE
            for MEMBER in $WORKSPACE; do cargo clean -p $MEMBER; done
      - save_cache:
          key: target-v1-{{ arch }}-{{ .Branch }}-{{ epoch }}
          paths:
            - "./target"
workflows:
  version: 2
  build:
    jobs:
      - build
