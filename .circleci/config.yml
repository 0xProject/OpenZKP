version: 2.1
# Validate using `circleci config validate`

# TODO: Build with profile guided optimization. Use benchmarks and select
#  example projects as guides. This is probably only worthwhile on `master`.
#  See https://doc.rust-lang.org/rustc/profile-guided-optimization.html

# TODO: Generate rustdoc and host somewhere

# TODO: Push relevant packages to crates.io

# TODO: Report documentation coverage.
# TODO: Codecheck on documentation coverage changes.

# TODO: Run benchmarks on reliable machine.
# TODO: Codecheck on benchmark changes.

# TODO: Submit all codecheck from `master` stats to Metabase.

# TODO: Sync `TODO` and other comments.

executors:
  # TODO: Add a container with fixed versions for reproducible builds from master.
  docker-builder:
    docker:
      - image: docker:stable-git
    environment:
      # Necessary for `docker manifest` subcommand
      DOCKER_CLI_EXPERIMENTAL: enabled
      # Bump the tag version whenever changes are made.
      IMAGE: &build_image "0xchain/rust-build-env:4"
  docker-rust:
    docker:
      - image: *build_image
    environment:
      RUST_BACKTRACE: "1"
      RUSTFLAGS: -Dwarnings
      SCCACHE_CACHE_SIZE: 1G
      # Exclude substrate-node (also pulls in a lot of deps, and currently fails)
      PACKAGES: --all --exclude substrate-node
      NO_STD_PACKAGES: macros_decl u256 primefield ecc starkdex stark substrate-runtime

commands:
  stop-if-image-exists:
    steps:
      - run:
          name: Stop if image exists
          command: |
            docker manifest inspect $IMAGE && (
              # See https://support.circleci.com/hc/en-us/articles/360015562253-Conditionally-end-a-running-job-gracefully
              circleci-agent step halt
            ) || true
  publish-image:
    steps:
      - run:
          name: Build and publish docker image
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker build -t $IMAGE . -f .circleci/images/rust-build-env.Dockerfile
            docker push $IMAGE
  enable-sccache:
    steps:
      - restore_cache:
          name: Restore sccache cache
          keys:
            - sccache-cache-v4-{{ arch }}-{{ .Environment.CIRCLE_JOB }}
      - run:
          name: Enable sccache
          command: |
            echo 'export RUSTC_WRAPPER=sccache' >> $BASH_ENV
            source $BASH_ENV
  save-sccache-cache:
    steps:
      - run:
          name: Show sccache statistics
          command: |
            sccache --show-stats
      - save_cache:
          name: Save sccache cache
          # We use {{ epoch }} to always upload a fresh cache:
          # Of course, restore_cache will not find this exact key,
          # but it will fall back to the closest key (aka the most recent).
          # See https://discuss.circleci.com/t/add-mechanism-to-update-existing-cache-key/9014/13
          key: sccache-cache-v4-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ epoch }}
          paths:
            - "~/.cache/sccache"
  codechecks:
    steps:
      - run:
          name: Run Codechecks
          command: |
              pushd .circleci/codechecks
              if [ -f $CIRCLE_JOB.yml ]; then
                npx codechecks all-jobs.yml $CIRCLE_JOB.yml
              else
                npx codechecks all-jobs.yml
              fi

jobs:
  rebuild-docker:
    executor: docker-builder
    # We need more resources to build the image
    resource_class: xlarge
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - publish-image
  build-docker:
    executor: docker-builder
    # We need more resources to build the image
    resource_class: xlarge
    steps:
      - stop-if-image-exists
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - publish-image
  tests:
    # See https://github.com/mozilla/grcov#grcov-with-travis
    # Requires nightly because of: https://github.com/rust-lang/rust/issues/42524
    # Requires non-incremental build.
    executor: docker-rust
    environment:
      GRCOVFLAGS: -s . --llvm --branch --ignore-not-existing --ignore-dir "/*"
    steps:
      - checkout
      - enable-sccache
      - run:
          name: Build tests with coverage
          command: |
            # Build with coverage settings from Dockerfile
            CARGO_INCREMENTAL=0 RUSTFLAGS="$COVFLAGS" cargo +$NIGHTLY build $PACKAGES --tests --all-features
      - save-sccache-cache
      - run:
          name: Run tests
          command: |
            CARGO_INCREMENTAL=0 RUSTFLAGS="$COVFLAGS" cargo +$NIGHTLY test $PACKAGES --all-features -- --nocapture
      - run:
          name: Combine coverage
          command: |
            zip -0 target/ccov.zip `find . \( -name "*.gc*" \) -print`
            grcov target/ccov.zip $GRCOVFLAGS -t lcov -o target/lcov.info
      - run:
          name: Submit to coveralls
          command: |
            grcov target/ccov.zip $GRCOVFLAGS -t coveralls+ --commit-sha $CIRCLE_SHA1 --service-name circleci --service-number $CIRCLE_BUILD_NUM --token $COVERALLS_SECRET -o target/coveralls.json
            cat target/coveralls.json | jq .git.branch=\"$CIRCLE_BRANCH\" > target/coveralls.fix.json
            curl -S -X POST -F "json_file=@target/coveralls.fix.json" "https://coveralls.io/api/v1/jobs"
      - run:
          name: Submit to codecov
          command: |
            bash <(curl -s https://codecov.io/bash)
      - store_artifacts:
          path: target/lcov.info
          destination: lcov.info
      - codechecks
  benchmarks:
    executor: docker-rust
    steps:
      - checkout
      - enable-sccache
      - run:
          name: Build benchmarks in release mode on stable
          command: cargo build --release --bench benchmark $PACKAGES --all-features
      - save-sccache-cache
      - run:
          name: Test benchmarks
          command: |
            # Actually running the benchmarks on CI is too noisy. The results
            # would be meaningless. Instead we just run it to make sure they work.
            # Exclude benchmarks that compare against external crates (pulls in a lot of deps)
            # HACK: We add 'bench' as a feature so dev-dependencies can be included as optional
            # regular dependencies behind a feature flag. This solves problems with feature
            # unification. 
            # HACK: We can not specify --features=bench in a workspace environment, instead
            # we enable all features (which makes sense from a test coverage perspective).
            # TODO: We don't need an optimized build here, re-using debug build would be ok.
            cargo bench --bench benchmark $PACKAGES --all-features -- --test
      - codechecks
  rustformat:
    executor: docker-rust
    steps:
      - checkout
      - run:
          name: Lint with rustformat nightly
          command: cargo +$NIGHTLY fmt --all -- --check
          # TODO: Run over wasm targets (which are not part of the workspace)
      - codechecks
  build-no-std:
    executor: docker-rust
    steps:
      - checkout
      - enable-sccache
      - run:
          # HACK: We try to build for Cortex-M3, not because we want to create
          # IoT devices, but because there is no `std` available for this target.
          # This forces the build to fail if an accidental dependency on `std`
          # exists. Wasm has a working std, so is not a suitable target here.
          # See: https://forge.rust-lang.org/platform-support.html
          # We only build libraries and binaries, as we are not interested in
          # the tests/benchmarks/examples working in no_std
          name: Check no std packages on nightly on a platform that has no std
          command: |
            # HACK: We use a for loop here because cargo across multiple
            # PACKAGES does not respect feature flags. This also helps
            # identifying the failing project.
            for i in $NO_STD_PACKAGES; do
              pushd $i
              cargo +$NIGHTLY check --lib --bins --no-default-features --target=thumbv7m-none-eabi
              popd
            done
      - save-sccache-cache
      - codechecks
  build-wasm-runtime:
    executor: docker-rust
    steps:
      - checkout
      - enable-sccache
      - run:
          name: Build wasm substrate runtime
          command: |
            pushd substrate-runtime-wasm
            cargo +$NIGHTLY build --release
            cp target/wasm32-unknown-unknown/release/substrate_node_runtime_wasm.wasm ./target/runtime.wasm
      - save-sccache-cache
      - run:
          name: Optimize for size
          command: |
            pushd substrate-runtime-wasm/target
            ls -l runtime.wasm
            wasm-gc runtime.wasm
            # OPT: Run wasm-opt -O3 runtime.wasm -o runtime.wasm
            ls -l runtime.wasm
      - run:
          name: List top 50 space consumers
          command: |
            pushd substrate-runtime-wasm/target
            twiggy top -n 50 runtime.wasm
      - persist_to_workspace:
          root: substrate-runtime-wasm/target
          paths:
            - runtime.wasm
      - store_artifacts:
          path: substrate-runtime-wasm/runtime.wasm
          destination: runtime.wasm
      - codechecks
  build-node:
    executor: docker-rust
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - enable-sccache
      - run:
          name: Build node executable (disabled)
          command: |
            #pushd substrate-node
            #cp ../substrate-runtime-wasm/runtime.wasm ./assets/runtime.wasm
            # TODO: This builds rocksdb as a dependency in c++, this is not
            # currently covered by sccache, but could be.
            # TODO: This build times out on CI.
            # cargo build --release
      - save-sccache-cache
      - codechecks
  clippy:
    executor: docker-rust
    steps:
      - checkout
      - enable-sccache
      - run:
          name: Lint with clippy
          command: |
            cargo clippy $PACKAGES --all-targets --all-features
            # TODO: Run over wasm targets (which are not part of the workspace)
            # TODO: Clippy different feature sets (std, test, bench, ...)
      - save-sccache-cache
      - codechecks
  accept:
    docker:
      - image: circleci/buildpack-deps
    steps:
      - run:
          name: Stop
          command: circleci-agent step halt

workflows:
  version: 2
  weekly:
    triggers:
      - schedule:
          # Weekly on Sunday 0am.
          cron: "0 0 * * 0"
          filters:
            branches:
              only:
                - master
    jobs:
      # Rebuild docker build environment to get up-to-date dependencies
      # and build cache.
      - rebuild-docker
  commit:
    jobs:
      - build-docker
      - tests:
          requires:
            - build-docker
      - benchmarks:
          requires:
            - build-docker
      - rustformat:
          requires:
            - build-docker
      - build-no-std:
          requires:
            - build-docker
      - build-wasm-runtime:
          requires:
            - build-docker
      - build-node:
          requires:
            - build-docker
            - build-wasm-runtime
      - clippy:
          requires:
            - build-docker
      # `accept` is a phony job which requires every check for a commit.
      # This allows us to set a single 'required status check' in GitHub.
      - accept:
          requires:
            - rustformat
            - clippy
            - tests
            - benchmarks
            - build-no-std
            - build-node
