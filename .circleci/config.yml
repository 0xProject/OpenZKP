version: 2.1

commands:
  restore-toolchain-cache:
    steps:
      - run:
          name: Allow CirceCI to write toolchain (workaround)
          command: |
            sudo mkdir -p /usr/local/{cargo,rustup}
            sudo chown -R circleci /usr/local/{cargo,rustup}
      - restore_cache:
          name: Restore toolchain cache
          keys: 
            - toolchain-v1-{{ arch }}-{{ .Environment.CIRCLE_JOB }}
            - toolchain-v1-{{ arch }}
  save-toolchain-cache:
    steps:
      - run:
          name: Generate toolchain cache key
          command: sha256sum /usr/local/rustup/toolchains/*/bin/* /usr/local/cargo/bin/* > TOOLCHAIN_CACHE_KEY
      - save_cache:
          name: Save toolchain cache
          key: toolchain-v1-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ checksum "TOOLCHAIN_CACHE_KEY" }}
          paths:
            - /usr/local/cargo
            - /usr/local/rustup
  setup-sccache:
    steps:
      - restore_cache:
          name: Restore sccache cache
          keys: 
            - sccache-cache-v1-{{ arch }}-{{ .Environment.CIRCLE_JOB }}
            - sccache-cache-v1-{{ arch }}
      - run:
          name: Setup sccache
          command: |
            RUSTC_WRAPPER="" cargo install sccache --no-default-features || echo Already installed
            sccache --version
  save-sccache-cache:
    steps:
      - run:
          name: Show sccache statistics
          command: |
            sccache --show-stats
      - save_cache:
          name: Save sccache cache
          # We use {{ epoch }} to always upload a fresh cache:
          # Of course, restore_cache will not find this exact key,
          # but it will fall back to the closest key (aka the most recent).
          # See https://discuss.circleci.com/t/add-mechanism-to-update-existing-cache-key/9014/13
          key: sccache-cache-v1-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ epoch }}
          paths:
            - "~/.cache/sccache"

jobs:
  build:
    docker:
      - image: circleci/rust:latest
    environment:
      - RUST_BACKTRACE: 1
      - RUSTFLAGS: -Dwarnings
      - RUSTC_WRAPPER: sccache
      - SCCACHE_CACHE_SIZE: 1G
      - NIGHTLY: nightly-2019-08-15
      - PROJECTS: -p u256 -p primefield -p ecc -p starkdex -p stark -p macros-decl -p macros-impl -p macros-lib
      - NO_STD_PROJECTS: macros_decl u256
    steps:
      - checkout
      - restore-toolchain-cache
      - setup-sccache
      - run:
          name: Setup toolchain
          command: |
            rustup component add rustfmt clippy
            rustup toolchain install $NIGHTLY
            rustup target add wasm32-unknown-unknown --toolchain $NIGHTLY
            rustup target add thumbv7m-none-eabi --toolchain $NIGHTLY
            rustup component add rustfmt --toolchain $NIGHTLY
            cargo install --git https://github.com/alexcrichton/wasm-gc || echo Already installed
            rustc --version
            cargo --version
            rustup --version
            wasm-gc --help > /dev/null # Run it to make sure it's executable
          no_output_timeout: 1800s
      - run:
          name: Build all targets on stable
          command: cargo build $PROJECTS --all-targets
      - run:
          # We try to build for Cortex-M3, not because we want to create IoT
          # devices, but because there is no `std` available for this target.
          # This forces the build to fail if an accidental dependency on `std`
          # exists. Wasm has a working std, so is not a suitable target here.
          # See: https://forge.rust-lang.org/platform-support.html
          # We only build libraries and binaries, as we are not interested in
          # the tests/benchmarks/examples working in no_std
          name: Check no_std targets on a platform that has no std
          command: |
            for i in $NO_STD_PROJECTS; do
              pushd $i
              cargo +$NIGHTLY check --lib --bins --no-default-features --target=thumbv7m-none-eabi
              popd
            done
      - run:
          name: Build all targets on stable in release mode
          command: cargo build --release $PROJECTS --all-targets
      - run:
          name: Build all targets on nightly
          command: cargo +$NIGHTLY build $PROJECTS --all-targets
      - run:
          name: Build benchmarks
          # Exclude benchmarks that compare against external crates (pulls in a lot of deps)
          command: cargo bench --features bench --bench benchmark --all --exclude primefield-benchmarks --no-run
      - run:
          name: Build wasm substrate runtime
          command: |
            cd substrate-runtime-wasm
            cargo +$NIGHTLY build --release
            cp target/wasm32-unknown-unknown/release/runtime.wasm ./
            wasm-gc $i.wasm $i.compact.wasm
      - run:
          name: Lint with rustformat nightly
          command: cargo +$NIGHTLY fmt $PROJECTS -- --check
          # TODO: Also cover substrate projects
      - run:
          name: Lint with clippy
          command: cargo clippy $PROJECTS --all-targets
          # TODO: Also cover substrate projects
      - run:
          name: Test debug build
          command: cargo test $PROJECTS -- --nocapture
      - run:
          name: Test release build
          command: cargo test --release $PROJECTS -- --nocapture
      - run:
          name: Test benchmarks
          command: |
            # Actually running the benchmarks on CI is too noisy. The results
            # would be meaningless. Instead we just run it to make sure they work.
            # Exclude benchmarks that compare against external crates (pulls in a lot of deps)
            cargo bench --features bench --bench benchmark --all --exclude primefield-benchmarks -- --test
      - save-sccache-cache
      - save-toolchain-cache

workflows:
  version: 2
  build:
    jobs:
      - build
