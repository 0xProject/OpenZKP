version: 2.1

commands:
  restore-cargo-home-cache:
    steps:
      - restore_cache:
          name: Restore cargo home cache
          key: cargo-home-v1-{{ arch }}
  save-cargo-home-cache:
    steps:
      - save_cache:
          name: Save cargo home cache
          key: cargo-home-v1-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ epoch }}
          paths:
            - "$CARGO_HOME"
  setup-sccache:
    steps:
      - run:
          name: Setup sccache
          command: |
            cargo install sccache --no-default-features
            # This configures Rust to use sccache.
            echo 'export "RUSTC_WRAPPER"="sccache"' >> $BASH_ENV
            # This is the maximum space sccache cache will use on disk.
            echo 'export "SCCACHE_CACHE_SIZE"="1G"' >> $BASH_ENV
            sccache --version
  save-sccache-cache:
    steps:
      - run:
          name: sccache statistics
          command: |
            sccache --show-stats
      - save_cache:
          name: Save sccache cache
          # We use {{ epoch }} to always upload a fresh cache:
          # Of course, restore_cache will not find this exact key,
          # but it will fall back to the closest key (aka the most recent).
          # See https://discuss.circleci.com/t/add-mechanism-to-update-existing-cache-key/9014/13
          key: sccache-cache-v1-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ epoch }}
          paths:
            - "~/.cache/sccache"

jobs:
  build:
    docker:
      - image: circleci/rust:latest
    environment:
      - RUST_BACKTRACE: 1
      - RUSTFLAGS: -Dwarnings
      - NIGHTLY: nightly-2019-08-15
    steps:
      - checkout
      - restore-cargo-home-cache
      - setup-sccache
      - run:
          name: Setup build environment
          command: |
            rustup component add rustfmt clippy
            rustup toolchain install $NIGHTLY
            rustup target add wasm32-unknown-unknown --toolchain $NIGHTLY
            rustup component add rustfmt --toolchain $NIGHTLY
            cargo install --git https://github.com/alexcrichton/wasm-gc
            rustc --version
            cargo --version
            rustup --version
          no_output_timeout: 1800s
      - run:
          name: Build all targets
          command: |
            cargo build -p ecc -p primefield -p starkdex -p starkcrypto-wasm -p stark -p macros-decl -p macros-impl -p macros-lib  --all-targets
            cargo +$NIGHTLY build -p ecc -p primefield -p starkdex -p starkcrypto-wasm -p stark -p macros-decl -p macros-impl -p macros-lib  --all-targets
      - run:
          name: Linting
          command: |
            cargo +$NIGHTLY fmt -p ecc primefield starkdex starkcrypto-wasm stark macros-decl macros-impl macros-lib -- --check
            cargo clippy -p ecc -p primefield -p starkdex -p starkcrypto-wasm -p stark -p macros-decl -p macros-impl -p macros-lib --all-targets
      - run:
          name: Test in debug and release mode
          command: |
            cargo test -p ecc -p primefield -p starkdex -p starkcrypto-wasm -p stark -p macros-decl -p macros-impl -p macros-lib -- --nocapture
            cargo test --release -p ecc -p primefield -p starkdex -p starkcrypto-wasm -p stark -p macros-decl -p macros-impl -p macros-lib -- --nocapture
      - run:
          name: Run benchmarks as tests
          command: |
            # Actually running the benchmarks on CI is too noisy. The results
            # would be meaningless. Instead we just run it to make sure they work.
            cargo bench --bench benchmark -- --test
      - save-sccache-cache
      - save-cargo-home-cache

workflows:
  version: 2
  build:
    jobs:
      - build
