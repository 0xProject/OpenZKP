version: 2
jobs:
  build:
    docker:
      - image: circleci/rust:latest
    environment:
      - RUST_BACKTRACE: 1
      - RUSTFLAGS: -Dwarnings

    steps:
      - checkout
      - restore_cache:
          key: project-cache
      - run:
          name: Version information
          command: |
            rustc --version
            cargo --version
            rustup --version
      - run:
          name: Setup build environment
          command: |
            rustup component add rustfmt clippy
            rustup toolchain install nightly-2019-07-31
            rustup component add rustfmt --toolchain nightly-2019-07-31
          no_output_timeout: 1800s
      - run: 
          name: Substrate dependancies
          command: |
                rustup toolchain install nightly
                ./substrate-node/scripts/init.sh
                sudo apt install cmake pkg-config libssl-dev git clang libclang-dev
                sudo apt install -y binfmt-support clang-3.8 cmake-data libarchive13 libclang-3.8-dev libclang-common-3.8-dev libclang1-3.8 libjsoncpp1 libllvm3.8 libobjc-6-dev libobjc4 libpipeline1 libuv1 llvm-3.8 llvm-3.8-dev llvm-3.8-runtime
                ./substrate-node/scripts/build.sh
      - run:
          name: Clean build
          command: |
            # Clean workspace projects but not dependencies.
            WORKSPACE=$(cargo metadata --format-version 1 | jq --raw-output '.workspace_members[] | match("^(\\w.+)\\ \\d";"g") | .captures[0].string')
            echo "Workspace projects: " $WORKSPACE
            for MEMBER in $WORKSPACE; do cargo clean -p $MEMBER; done
      - run:
          name: Linting
          command: |
            cargo +nightly-2019-07-31 fmt -p ecc primefield starkdex starkcrypto-wasm stark macros-decl macros-impl macros-lib -- --check
            cargo clippy -p ecc -p primefield -p starkdex -p starkcrypto-wasm -p stark -p macros-decl -p macros-impl -p macros-lib --all-targets
      - run:
          name: Build all targets
          command: |
            cargo build --release --all --all-targets
      - run:
          name: Test in debug and release mode
          command: |
            cargo test -p ecc -p primefield -p starkdex -p starkcrypto-wasm -p stark -p macros-decl -p macros-impl -p macros-lib -- --nocapture
            cargo test --release -p ecc -p primefield -p starkdex -p starkcrypto-wasm -p stark -p macros-decl -p macros-impl -p macros-lib -- --nocapture
      - run:
          name: Run benchmarks as tests
          command: |
            # Actually running the benchmarks on CI is too noisy. The results
            # would be meaningless. Instead we just run it to make sure they work.
            cargo bench --bench benchmark -- --test
      # TODO: Coverage
      - save_cache:
          key: project-cache
          paths:
            - "~/.cargo"
            - "./target"
workflows:
  version: 2
  build:
    jobs:
      - build