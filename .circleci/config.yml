version: 2.1

executors:
  docker-builder:
    docker:
      - image: circleci/buildpack-deps:stretch
    environment:
      # Note: increment on changes do Dockerfile both here and in `docker-rust` below
      IMAGE: 0xchain/rust-build-env:v1
  docker-rust:
    docker:
      - image: 0xchain/rust-build-env:v1
    environment:
      RUST_BACKTRACE: "1"
      RUSTFLAGS: -Dwarnings
      SCCACHE_CACHE_SIZE: 1G
      # Exclude substrate-node (also pulls in a lot of deps, and currently fails)
      PACKAGES: --all --exclude substrate-node
      NO_STD_PACKAGES: macros_decl u256 primefield ecc starkdex stark substrate-runtime

commands:
  enable-sccache:
    steps:
      - restore_cache:
          name: Restore sccache cache
          keys: 
            - sccache-cache-v1-{{ arch }}-{{ .Environment.CIRCLE_JOB }}
            - sccache-cache-v1-{{ arch }}
      - run:
          name: Enable sccache
          command: |
            echo 'export RUSTC_WRAPPER=sccache' >> $BASH_ENV
            source $BASH_ENV
  save-sccache-cache:
    steps:
      - run:
          name: Show sccache statistics
          command: |
            sccache --show-stats
      - save_cache:
          name: Save sccache cache
          # We use {{ epoch }} to always upload a fresh cache:
          # Of course, restore_cache will not find this exact key,
          # but it will fall back to the closest key (aka the most recent).
          # See https://discuss.circleci.com/t/add-mechanism-to-update-existing-cache-key/9014/13
          key: sccache-cache-v1-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ epoch }}
          paths:
            - "~/.cache/sccache"
  codechecks:
    steps:
      - run:
          name: Build Codechecks
          command: |
              pushd .circleci/codechecks
              yarn
      - run:
          name: Run Codechecks
          command: |
              pushd .circleci/codechecks
              if [ -f $CIRCLE_JOB.yml ]; then
                npx codechecks all-jobs.yml $CIRCLE_JOB.yml
              else
                npx codechecks all-jobs.yml
              fi
  save-target-to-workspace:
    steps:
      - persist_to_workspace:
          root: .
          paths:
            - target
  restore-target-from-workspace:
    steps:
      - attach_workspace:
          at: .

jobs:
  build-docker:
    executor: docker-builder
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: docker build -t $IMAGE_NAME .circleci/images/rust-build-env
  publish-docker:
    executor: docker-builder
    steps:
      - setup_remote_docker
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $IMAGE_NAME:latest
  build-stable:
    executor: docker-rust
    steps:
      - setup-toolchain
      - enable-sccache
      - checkout
      - run:
          name: Build all targets on stable
          command: cargo build $PACKAGES --all-targets --all-features
      - save-sccache-cache
      - save-target-to-workspace
      - codechecks
  build-nightly:
    executor: docker-rust
    steps:
      - setup-toolchain
      - enable-sccache
      - checkout
      - run:
          # NOTE: The nightly build target is here for rustfmt-nightly
          name: Build all targets on nightly
          command: cargo +$NIGHTLY build $PACKAGES --all-targets --all-features
      - save-sccache-cache
      - save-target-to-workspace
      - codechecks
  build-benchmarks:
    executor: docker-rust
    steps:
      - setup-toolchain
      - enable-sccache
      - checkout
      - run:
          name: Build benchmarks
          command: |
            # HACK: We can not specify --features=bench in a workspace environment, instead
            # we enable all features (which makes sense from a test coverage perspective).
            cargo bench --features bench --bench benchmark $PACKAGES --all-features --no-run
      - save-sccache-cache
      - save-target-to-workspace
      - codechecks
  build-no-std:
    executor: docker-rust
    steps:
      - setup-toolchain
      - enable-sccache
      - checkout
      - run:
          # HACK: We try to build for Cortex-M3, not because we want to create
          # IoT devices, but because there is no `std` available for this target.
          # This forces the build to fail if an accidental dependency on `std`
          # exists. Wasm has a working std, so is not a suitable target here.
          # See: https://forge.rust-lang.org/platform-support.html
          # We only build libraries and binaries, as we are not interested in
          # the tests/benchmarks/examples working in no_std
          name: Check no std packages on nightly on a platform that has no std
          command: |
            # HACK: We use a for loop here because cargo across multiple
            # PACKAGES does not respect feature flags. This also helps
            # identifying the failing project.
            for i in $NO_STD_PACKAGES; do
              pushd $i
              cargo +$NIGHTLY check --lib --bins --no-default-features --target=thumbv7m-none-eabi
              popd
            done
      - save-sccache-cache
      - codechecks
  build-wasm-runtime:
    executor: docker-rust
    steps:
      - setup-toolchain
      - enable-sccache
      - checkout
      - run:
          name: Build wasm substrate runtime
          command: |
            pushd substrate-runtime-wasm
            cargo +$NIGHTLY build --release
            cp target/wasm32-unknown-unknown/release/substrate_node_runtime_wasm.wasm ./runtime.wasm
      - run:
          name: Optimize for size
          command: |
            pushd substrate-runtime-wasm
            ls -l runtime.wasm
            wasm-gc runtime.wasm
            # OPT: Run wasm-opt -O3 runtime.wasm -o runtime.wasm
            ls -l runtime.wasm
      - run:
          name: List top 50 space consumers
          command: |
            pushd substrate-runtime-wasm
            twiggy top -n 50 runtime.wasm
      - save-sccache-cache
      - store_artifacts:
          path: substrate-runtime-wasm/runtime.wasm
          destination: runtime.wasm
      - codechecks
  build-node:
    executor: docker-rust
    steps:
      - setup-toolchain
      - enable-sccache
      - checkout
      - run:
          name: Build node executable (disabled)
          command: |
            #pushd substrate-node
            #cp ../substrate-runtime-wasm/runtime.wasm ./assets/runtime.wasm
            # TODO: This builds rocksdb as a dependency in c++, this is not
            # currently covered by sccache, but could be.
            # TODO: This build times out on CI.
            # cargo build --release
      #- store_artifacts:
      #    path: target/release/substrate-node
      #    destination: node-{{ arch }}
      - codechecks
  rustformat-nightly:
    executor: docker-rust
    steps:
      - setup-toolchain
      - enable-sccache
      - checkout
      - restore-target-from-workspace
      - run:
          name: Lint with rustformat nightly
          command: cargo +$NIGHTLY fmt --all -- --check
          # TODO: Run over wasm targets (which are not part of the workspace)
      - codechecks
  clippy:
    executor: docker-rust
    steps:
      - setup-toolchain
      - enable-sccache
      - checkout
      - restore-target-from-workspace
      - run:
          name: Lint with clippy
          command: cargo clippy $PACKAGES --all-targets --all-features
          # TODO: Run over wasm targets (which are not part of the workspace)
      - codechecks
  tests:
    executor: docker-rust
    steps:
      - setup-toolchain
      - enable-sccache
      - checkout
      - restore-target-from-workspace
      - run:
          name: Test debug build
          command: cargo test $PACKAGES --all-features -- --nocapture
      - codechecks
  test-benchmarks:
    executor: docker-rust
    steps:
      - setup-toolchain
      - enable-sccache
      - checkout
      - restore-target-from-workspace
      - run:
          name: Test benchmarks
          command: |
            # Actually running the benchmarks on CI is too noisy. The results
            # would be meaningless. Instead we just run it to make sure they work.
            # Exclude benchmarks that compare against external crates (pulls in a lot of deps)
            # HACK: We add 'bench' as a feature so dev-dependencies can be included as optional
            # regular dependencies behind a feature flag. This solves problems with feature
            # unification. 
            # HACK: We can not specify --features=bench in a workspace environment, instead
            # we enable all features (which makes sense from a test coverage perspective).
            # TODO: We don't need an optimized build here, re-using debug build would be ok.
            cargo bench --bench benchmark $PACKAGES --all-features -- --test
      - codechecks

workflows:
  version: 2
  build:
    jobs:
      - build-docker
      - publish-docker:
          requires:
            - build-docker
      - build-stable:
          requires:
            - publish-docker
      - build-nightly:
          requires:
            - publish-docker
      - build-no-std:
          requires:
            - publish-docker
      - build-wasm-runtime:
          requires:
            - publish-docker
      - build-node:
          requires:
            - publish-docker
            - build-wasm-runtime
      - rustformat-nightly:
          requires:
            - publish-docker
            - build-nightly
      - clippy:
          requires:
            - publish-docker
            - build-stable
      - tests:
          requires:
            - publish-docker
            - build-stable
      - test-benchmarks:
          requires:
            - publish-docker
            - build-stable

