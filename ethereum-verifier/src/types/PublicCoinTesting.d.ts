/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface PublicCoinTestingInterface extends Interface {
  functions: {
    init_and_read: TypedFunctionDescription<{
      encode([starting_data, number]: [Arrayish, BigNumberish]): string;
    }>;

    init_and_write: TypedFunctionDescription<{
      encode([starting_data, data]: [Arrayish, Arrayish]): string;
    }>;
  };

  events: {};
}

export class PublicCoinTesting extends Contract {
  connect(signerOrProvider: Signer | Provider | string): PublicCoinTesting;
  attach(addressOrName: string): PublicCoinTesting;
  deployed(): Promise<PublicCoinTesting>;

  on(event: EventFilter | string, listener: Listener): PublicCoinTesting;
  once(event: EventFilter | string, listener: Listener): PublicCoinTesting;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): PublicCoinTesting;
  removeAllListeners(eventName: EventFilter | string): PublicCoinTesting;
  removeListener(eventName: any, listener: Listener): PublicCoinTesting;

  interface: PublicCoinTestingInterface;

  functions: {
    init_and_read(
      starting_data: Arrayish,
      number: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    init_and_write(
      starting_data: Arrayish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  init_and_read(
    starting_data: Arrayish,
    number: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  init_and_write(
    starting_data: Arrayish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    init_and_read(
      starting_data: Arrayish,
      number: BigNumberish
    ): Promise<BigNumber>;

    init_and_write(starting_data: Arrayish, data: Arrayish): Promise<BigNumber>;
  };
}
